type nat =
  | O
  | S of nat

let add =
  fix (add : nat -> nat -> nat) =
    fun (n1 : nat) ->
      fun (n2 : nat) ->
        match n1 with
        | O -> n2
        | S n1p -> S (add n1p n2)
;;

synth nat -> nat -> nat satisfying

[0,0] -> 0,
[1,0] -> 0,
[1,2] -> 2,
[3,3] -> 9,
[3,2] -> 6,
[2,2] -> 4,
