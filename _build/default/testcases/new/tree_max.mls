type nat =
  | O
  | S of nat

type bool =
  | True
  | False

type cmp =
  | LT
  | EQ
  | GT

type tree =
  | Leaf
  | Node of nat * tree * tree

let compare =
  fix (compare : nat -> nat -> cmp) =
    fun (x1 : nat) ->
      fun (x2 : nat) ->
        match x1 with
        | O -> (match x2 with
                | O -> EQ
                | S _ -> LT)
        | S x1 -> (match x2 with
                | O -> GT
                | S x2 -> compare x1 x2)
;;

let max =
  fix (max : nat -> nat -> nat) =
    fun (x:nat) ->
     fun (y:nat) ->
      match (compare x y) with
        | LT _ -> x
        | EQ _ -> x
        | GT _ -> y
;;

synth tree -> nat satisfying

[Leaf] -> 0,
[Node (2, Leaf, Leaf)] -> 2,
[Node (0, Node (1, Leaf, Leaf), Leaf)] -> 1,
[Node (0, Node (7, Node (2, Leaf, Leaf), Leaf), Leaf)] -> 7,
[Node (0, Node (1, Node (3, Leaf, Leaf), Node (4, Leaf, Leaf)), Node (2, Leaf, Leaf))] -> 4,
[Node (0, Node (1, Node (3, Leaf, Leaf), Node (4, Leaf, Node (5, Leaf, Leaf))), Node (2, Leaf, Leaf))] ->  5,
 
