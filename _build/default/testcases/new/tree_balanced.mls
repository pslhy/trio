type nat =
  | O
  | S of nat

type tree =
  | Leaf
  | Node of nat * tree * tree

type bool =
  | True
  | False

type cmp =
  | LT
  | EQ
  | GT

let compare =
  fix (compare : nat -> nat -> cmp) =
    fun (x1 : nat) ->
      fun (x2 : nat) ->
        match x1 with
        | O -> (match x2 with
                | O -> EQ
                | S _ -> LT)
        | S x1 -> (match x2 with
                | O -> GT
                | S x2 -> compare x1 x2)
;;

let max =
  fix (max : nat -> nat -> nat) =
    fun (x:nat) ->
     fun (y:nat) ->
      match (compare x y) with
        | LT _ -> x
        | EQ _ -> x
        | GT _ -> y
;;

let height =
  fix (height : tree -> nat) =
    fun (x : tree) ->
      match x with
      | Leaf _ -> O
      | Node _ -> match (Un_Node x.1) with
                | Leaf _ -> S((height (Un_Node x.2)))
                | Node _ -> match (Un_Node x.2) with
                             | Leaf _ -> S((height (Un_Node x.1)))
                             | Node _ -> S(max (height (Un_Node x.1)) (height (Un_Node x.2)))
;;

synth tree -> bool satisfying

[Leaf] -> True,
[Node (2, Leaf, Leaf)] -> True,
[Node (0, Node (1, Leaf, Leaf), Leaf)] -> True,
[Node (0, Node (1, Node (2, Leaf, Leaf), Leaf), Leaf)] -> False,
[Node (0, Node (1, Node (3, Leaf, Leaf), Node (4, Leaf, Leaf)), Node (2, Leaf, Leaf))] -> True,
[Node (0, Node (1, Node (3, Leaf, Leaf), Node (4, Leaf, Node (5, Leaf, Leaf))), Node (2, Leaf, Leaf))] ->  False
