type bool =
  | True
  | False

type list =
  | Nil
  | Cons of bool * list

let band =
 fix (band : bool -> bool -> bool) =
  fun (x: bool) ->
   fun (y: bool) ->
    match x with
     | False ->
        x
     | True ->
        y
;;

let bor =
 fix (bor : bool -> bool -> bool) =
  fun (x: bool) ->
   fun (y: bool) ->
    match x with
     | False ->
        y
     | True ->
        x
;;

let bxor =
 fix (bxor : bool -> bool -> bool) =
  fun (x: bool) ->
   fun (y: bool) ->
    match x with
     | False -> match y with
     		| False -> False
		| True -> True
     | True -> match y with
     		| False -> True
		| True -> False
;;

synth list -> bool satisfying

[Nil] -> True,
[Cons(False,Nil)] -> True,
[Cons(True,Nil)] -> False,
[Cons(False,Cons(False,Nil))] -> True,
[Cons(False,Cons(True,Nil))] -> False,
[Cons(True,Cons(False,Nil))] -> False,
[Cons(True,Cons(True,Nil))] -> True,
