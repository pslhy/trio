type nat =
  | O
  | S of nat

let sum =
  fix (sum : nat -> nat -> nat) =
    fun (n1 : nat) ->
      fun (n2 : nat) ->
        match n1 with
        | O -> n2
        | S n1p -> S (sum n1p n2)
;;

let temp = 
  fun (n:nat) -> n
;;

synth nat -> nat -> (nat -> nat) -> nat satisfying

[2, 3, temp] -> 5,
[0, 2, temp] -> 3,
[0, 0, temp] -> 0,
[4, 1, temp] -> 0,
[0, 3, temp] -> 6,