type nat = 
| O 
| S of nat 

type exp = 
| INT of nat 
| ADD of exp * exp 
| SUB of exp * exp
| MUL of exp * exp 

let add =
  fix (add : nat -> nat -> nat) =
    fun (n1 : nat) ->
      fun (n2 : nat) ->
        match n1 with
        | O -> n2
        | S n1p -> S (add n1p n2)
;;

let sub =
  fix (sub : nat -> nat -> nat) =
    fun (n1 : nat) ->
      fun (n2 : nat) ->
        match n1 with
        | O -> O
        | S n1p -> match n2 with
                    | O -> n1
                    | S n2p -> (sub n1p n2p)
;;

let mul =
  fix (mul : nat -> nat -> nat) =
    fun (n1 : nat) ->
      fun (n2 : nat) ->
        match n1 with
        | O -> O 
        | S n1p -> add n2 (mul n1p n2)
;;


synth exp -> nat satisfying 

[INT(1)] -> 1, 
[ADD(INT(3), INT(4))] -> 7, 
[SUB(INT(4), INT(3))] -> 1,
[SUB(INT(5), INT(1))] -> 4,
[MUL(INT(3), INT(3))] -> 9, 
[MUL(INT(2), INT(3))] -> 6, 
