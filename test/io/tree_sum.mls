type nat =
  | O
  | S of nat

type tree =
  | Leaf
  | Node of nat * tree * tree

let add =
  fix (add : nat -> nat -> nat) =
    fun (n1 : nat) ->
      fun (n2 : nat) ->
        match n1 with
        | O -> n2
        | S n1p -> S (add n1p n2)
;;

synth tree -> nat satisfying

[Leaf] -> 0,
[Node (2, Leaf, Leaf)] -> 2,
[Node (1, Node (1, Leaf, Leaf), Leaf)] -> 2,
[Node (1, Leaf, Node(2, Leaf, Leaf))] -> 3,
[Node (0, Node (1, Node (2, Leaf, Leaf), Leaf), Leaf)] -> 3,
[Node (0, Node (1, Leaf, Leaf), Node (2, Leaf, Leaf))] -> 3,