type nat =
  | O
  | S of nat

type list =
  | Nil
  | Cons of nat * list

type cmp =
  | LT
  | EQ
  | GT

let compare =
  fix (compare : nat -> nat -> cmp) =
    fun (x1 : nat) ->
      fun (x2 : nat) ->
        match x1 with
        | O -> (match x2 with
                | O -> EQ
                | S _ -> LT)
        | S x1p -> (match x2 with
                    | O -> GT
                    | S x2p -> compare x1p x2p)
;;

synth list -> nat -> list satisfying

equiv

fix (f : list -> nat -> list) =
  fun (l:list) ->
    fun (x:nat) ->
      match l with
        | Nil -> Cons (x, Nil)
        | Cons (h,t) ->
          (match compare x h with
             | LT -> Cons (x, l)
             | EQ -> l
             | GT -> Cons (h, f t x))