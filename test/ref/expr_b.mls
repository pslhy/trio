type bool =
| True
| False

type formula =
| BOOL of bool
| NOT of formula
| ANDALSO of formula * formula
| ORELSE of formula * formula
| IMPLY of formula * formula

let bnot =
 fix (bnot : bool -> bool) =
   fun (x: bool) ->
    match x with
    | False ->
        True
    | True ->
        False
;;  

let band =
 fix (band : bool -> bool -> bool) =
  fun (x: bool) ->
   fun (y: bool) ->
    match x with
     | False ->
        x
     | True ->
        y
;;

let bor =
 fix (bor : bool -> bool -> bool) =
  fun (x: bool) ->
   fun (y: bool) ->
    match x with
     | False ->
        y
     | True ->
        x
;;

synth formula -> bool satisfying

equiv

fix (f : formula -> bool) =
  fun (x:formula) ->
    match x with
      | BOOL b -> b
      | NOT e -> bnot (f e)
      | ANDALSO (e1,e2) -> band (f e1) (f e2)
      | IMPLY (e1,e2) -> bor (bnot (f e1)) (f e2)
      | ORELSE (e1,e2) -> bor (f e1) (f e2)