type nat =
  | O
  | S of nat

type list =
  | Nil
  | Cons of nat * list

let snoc =
  fix (snoc : list -> nat -> list) =
    fun (l1 : list) ->
      fun (n : nat) ->
        match l1 with
        | Nil -> Cons (n, Nil)
        | Cons (h,t) -> Cons(h,snoc t n)
;;

synth list -> list satisfying

equiv

fix (f : list -> list) =
  fun (x:list) ->
    match x with
      | Nil -> Nil
      | Cons (h,t) -> snoc (f t) h
