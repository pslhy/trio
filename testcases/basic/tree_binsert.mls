type cmp =
  | CEq
  | CGt
  | CLt

type nat =
  | O
  | S of nat

type tree =
  | Leaf
  | Node of tree * nat * tree

let comp_nat =
  fix (comp_nat : nat -> nat -> cmp) =
    fun (x1 : nat) ->
      fun (x2 : nat) ->
        match x1 with
        | O -> (match x2 with
                | O -> CEq
                | S _ -> CLt)
        | S x1 -> (match x2 with
                | O -> CGt
                | S x2 -> comp_nat x1 x2)
;;

synth tree -> nat -> tree satisfying

[Leaf,0] -> Node (Leaf, 0, Leaf),
[Leaf,1] -> Node (Leaf, 1, Leaf),
[Leaf,2] -> Node (Leaf, 2, Leaf),
[Node (Leaf, 1, Leaf),0] -> Node (Node (Leaf, 0, Leaf), 1, Leaf),
[Node (Leaf, 1, Leaf),1] -> Node (Leaf, 1, Leaf),
[Node (Leaf, 1, Leaf),2] -> Node (Leaf, 1, Node (Leaf, 2, Leaf)),
[Node (Leaf, 0, Leaf),0] -> Node (Leaf, 0, Leaf),
[Node (Leaf, 0, Leaf),1] -> Node (Leaf, 0, Node (Leaf, 1, Leaf)),
[Node (Leaf, 0, Leaf),2] -> Node (Leaf, 0, Node (Leaf, 2, Leaf)),
[Node (Leaf, 2, Leaf),0] -> Node (Node (Leaf, 0, Leaf), 2, Leaf),
[Node (Leaf, 2, Leaf),1] -> Node (Node (Leaf, 1, Leaf), 2, Leaf),
[Node (Leaf, 2, Leaf),2] -> Node (Leaf, 2, Leaf),
[Node (Node (Leaf, 0, Leaf), 1, Leaf),0] -> Node (Node (Leaf, 0, Leaf), 1, Leaf),
[Node (Node (Leaf, 0, Leaf), 1, Leaf),1] -> Node (Node (Leaf, 0, Leaf), 1, Leaf),
[Node (Node (Leaf, 0, Leaf), 1, Leaf),2] -> Node (Node (Leaf, 0, Leaf), 1, Node (Leaf, 2, Leaf)),
[Node (Leaf, 0, Node (Leaf, 1, Leaf)),2] -> Node (Leaf, 0, Node (Leaf, 1, Node (Leaf, 2, Leaf))),
[Node (Node (Leaf, 1, Leaf), 2, Leaf),0] -> Node (Node (Node(Leaf, 0, Leaf), 1, Leaf), 2, Leaf),
[Node (Leaf, 1, Node (Leaf, 2, Leaf)),0] -> Node (Node (Leaf, 0, Leaf), 1, Node (Leaf, 2, Leaf)),
[Node (Leaf, 1, Node (Leaf, 2, Leaf)),1] -> Node (Leaf, 1, Node (Leaf, 2, Leaf)),
[Node (Node (Leaf, 1, Leaf), 2, Leaf),0] -> Node (Node (Node(Leaf, 0, Leaf), 1, Leaf), 2, Leaf)
