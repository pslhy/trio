type nat =
  | O
  | S of nat

type list =
  | Nil
  | Cons of nat * list

let map =
  fix (map : list -> (nat -> nat) -> list) =
    fun (l1 : list) ->
      fun (f : nat -> nat) ->
        match l1 with
        | Nil -> Nil
        | Cons (h,t) -> Cons (f h, map t f)
;;

synth list -> list satisfying

[Nil] -> Nil,
[Cons(1,Nil)] -> Cons(2,Nil),
[Cons(1,Cons(2,Nil))] -> Cons(2,Cons(3,Nil)),
[Cons(0,Cons(0,Nil))] -> Cons(1,Cons(1,Nil)),
[Cons(3,Cons(4,Cons(5,Nil)))] -> Cons(4,Cons(5,Cons(6,Nil))),
