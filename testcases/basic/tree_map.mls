type nat =
  | O
  | S of nat

type list =
  | Nil
  | Cons of nat * list

type tree =
  | Leaf
  | Node of tree * nat * tree

let div2 =
  fix (div2 : nat -> nat) =
    fun (n : nat) ->
      match n with
      | O -> O
      | S np ->
        (match np with
         | O -> O
         | S npp -> S (div2 npp))
;;

let inc =
  fun (n : nat) ->
    S n
;;

synth (nat -> nat) -> tree -> tree satisfying

[div2,Leaf] -> Leaf,
[div2,Node (Node (Leaf, 2, Leaf), 2, Leaf)] -> Node (Node (Leaf, 1, Leaf), 1, Leaf),
[div2,Node (Leaf, 1, Node (Leaf, 2, Leaf))] -> Node (Leaf, 0, Node (Leaf, 1, Leaf)),
[inc,Node (Leaf, 0, Leaf)] -> Node (Leaf, 1, Leaf),
