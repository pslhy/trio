type nat =
  | O
  | S of nat

type tree =
  | Leaf
  | Node of nat * tree * tree

type bool =
  | True
  | False

type cmp =
  | LT
  | EQ
  | GT

let compare =
  fix (compare : nat -> nat -> cmp) =
    fun (x1 : nat) ->
      fun (x2 : nat) ->
        match x1 with
        | O -> (match x2 with
                | O -> EQ
                | S _ -> LT)
        | S x1 -> (match x2 with
                | O -> GT
                | S x2 -> compare x1 x2)
;;

let max =
  fix (max : nat -> nat -> nat) =
    fun (x:nat) ->
     fun (y:nat) ->
      match (compare x y) with
        | LT _ -> x
        | EQ _ -> x
        | GT _ -> y
;;

let height =
  fix (height : tree -> nat) =
    fun (x : tree) ->
      match x with
      | Leaf _ -> O
      | Node y -> match y.1 with
                | Leaf _ -> S((height (y.2)))
                | Node z -> match y.2 with
                             | Leaf _ -> S((height (y.1)))
                             | Node w -> S(max (height (y.1)) (height (y.2)))
;;

let band =
 fix (band : bool -> bool -> bool) =
  fun (x: bool) ->
   fun (y: bool) ->
    match x with
     | False ->
        x
     | True ->
        y
;;

synth tree -> bool satisfying

equiv

fix (f : tree -> bool) =
    fun (x : tree) ->
        match x with
        | Leaf _ -> True
        | Node (v,l,r) -> match compare (height l) (height r) with
                          | EQ _ -> band (f r) (f l) 
                          | LT _ -> (match compare S((height l)) (height r) with
                                    | LT _ -> False
                                    | _ -> band (f r) (f l) )
                          | GT _ -> (match compare S((height r)) (height l) with
                                    | LT _ -> False
                                    | _ -> band (f r) (f l) )