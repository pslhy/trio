type nat =
  | O
  | S of nat

type list =
  | Nil
  | Cons of nat * list

type cmp =
  | LT
  | EQ
  | GT

let compare =
  fix (compare : nat -> nat -> cmp) =
    fun (x1 : nat) ->
      fun (x2 : nat) ->
        match x1 with
        | O -> (match x2 with
                | O -> EQ
                | S _ -> LT)
        | S x1 -> (match x2 with
                | O -> GT
                | S x2 -> compare x1 x2)
;;

synth list -> list satisfying

[Nil] -> Nil,
[Cons(0,Nil)] -> Cons(0,Nil),
[Cons(1,Nil)] -> Cons(1,Nil),
[Cons(0,Cons(0,Nil))] -> Cons(0,Nil),
[Cons(1,Cons(1,Nil))] -> Cons(1,Nil),
[Cons(2,Cons(0,Nil))] -> Cons(2,Cons(0,Nil)),

equiv

fix (f : list -> list) =
  fun (x:list) ->
    match x with
      | Nil -> Nil
      | Cons (h1,t1) -> match t1 with 
                      | Nil -> x
                      | Cons (h2,t2) ->
                        (match compare h1 h2 with
                            | LT _ -> Cons (h1, f (Cons (h2, t2)))
                            | EQ _ -> f Cons (h2, t2)
                            | GT _ -> Cons (h1, f (Cons (h2, t2))))