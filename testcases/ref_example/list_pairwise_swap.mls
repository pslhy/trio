type nat =
  | O
  | S of nat

type list =
  | Nil
  | Cons of nat * list

synth list -> list satisfying

[Nil] -> Nil,
[Cons(1,Nil)] -> Nil,
[Cons(1,Cons(0,Nil))] -> Cons(0,Cons(1,Nil)),
[Cons(1,Cons(0,Cons(1,Nil)))] -> Cons(0,Cons(1,Nil)),
[Cons(0,Cons(1,Cons(0,Cons(1,Nil))))] -> Cons(1,Cons(0,Cons(1,Cons(0,Nil)))),

equiv

fix (f : list -> list) =
  fun (x:list) ->
    match x with
      | Nil _ -> x
      | Cons (h,t) -> (match t with
                     | Nil _ -> t
                     | Cons (h2,t2) -> Cons (h2,Cons (h, f t2)))