type nat =
  | O
  | S of nat

type list =
  | Nil
  | Cons of nat * list

synth list -> nat -> nat satisfying

[Nil,1] -> 0,
[Cons(2,Nil),1] -> 0,
[Cons(1,Cons(2,Nil)),0] -> 1,
[Cons(1,Cons(2,Nil)),1] -> 2,
[Cons(2,Cons(1,Nil)),0] -> 2,
[Cons(3,Cons(2,Cons(1,Nil))),0] -> 3,
[Cons(4,Cons(3,Cons(2,Cons(1,Nil)))),1] -> 3,

equiv

fix (f : list -> nat -> nat) =
  fun (l:list) ->
    fun (n:nat) ->
      match l with
        | Nil -> O
        | Cons (h,t) -> (match n with
                       | O -> h
                       | S np -> f t np)