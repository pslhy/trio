type nat =
  | O
  | S of nat

type list =
  | Nil
  | Cons of nat * list

synth list -> list -> list satisfying

[Nil,Nil] -> Nil,
[Cons(0,Nil),Nil] -> Cons(0,Nil),
[Cons(0,Cons(1,Nil)),Nil] -> Cons(1,Cons(0,Nil)),

equiv

fix (f : list -> list -> list) =
  fun (l:list) ->
    fun (acc:list) ->
      match l with
        | Nil -> acc
        | Cons (h,t) -> f t (Cons (h,acc))