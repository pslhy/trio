type nat =
  | O
  | S of nat

type list =
  | Nil
  | Cons of nat * list

synth list -> list -> list satisfying

[Nil,Nil] -> Nil,
[Cons(1,Cons(0,Nil)),Nil] -> Cons(1,Cons(0,Nil)),
[Cons(0,Nil),Cons(0,Nil)] -> Cons(0,Cons(0,Nil)),
[Cons(1,Cons(0,Nil)),Cons(0,Nil)] -> Cons(1,Cons(0,Cons(0,Nil))),

equiv

fix (f : list -> list -> list) =
  fun (l1:list) ->
    fun (l2:list) ->
      match l1 with
        | Nil -> l2
        | Cons (h,t) -> Cons (h, f t l2)