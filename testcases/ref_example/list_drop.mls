type nat =
  | O
  | S of nat

type list =
  | Nil
  | Cons of nat * list

synth list -> nat -> list satisfying

[Nil,0] -> Nil,
[Cons(1,Nil),0] -> Cons(1,Nil),
[Cons(1,Nil),1] -> Nil,
[Cons(1,Cons(0,Nil)),1] -> Cons(0,Nil),
[Cons(0,Cons(1,Nil)),2] -> Nil,

equiv

fix (f : list -> nat -> list) =
  fun (l:list) ->
    fun (n:nat) ->
      match l with
        | Nil -> Nil
        | Cons (h,t) -> (match n with
                       | O -> l
                       | S np -> (f t np))