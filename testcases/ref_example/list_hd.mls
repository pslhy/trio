type nat =
  | O
  | S of nat

type list =
  | Nil
  | Cons of nat * list

synth list -> nat satisfying

[Nil] -> 0,
[Cons(1,Nil)] -> 1,
[Cons(2,Cons(1,Nil))] -> 2

equiv
  fix (f : list -> nat) =
    fun (x:list) -> match x with
                    | Nil -> O
                    | Cons (h,_) -> h