type nat =
  | O
  | S of nat

type list =
  | Nil
  | Cons of nat * list

synth list -> list satisfying

[Nil] -> Nil,
[Cons(1,Cons(0,Nil))] -> Cons(1,Cons(1,Cons(0,Cons(0,Nil)))),

equiv

fix (f : list -> list) =
  fun (x:list) ->
    match x with
      | Nil -> x
      | Cons (h,t) -> Cons (h, Cons (h, f t))