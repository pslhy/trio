type nat = 
| O 
| S of nat 

type exp = 
| INT of nat 
| ADD of exp * exp 
| SUB of exp * exp
| MUL of exp * exp 
| DIV of exp * exp

type cmp =
  | LT
  | EQ
  | GT

let compare =
  fix (compare : nat -> nat -> cmp) =
    fun (x1 : nat) ->
      fun (x2 : nat) ->
        match x1 with
        | O -> (match x2 with
                | O -> EQ
                | S _ -> LT)
        | S x1p -> (match x2 with
                | O -> GT
                | S x2p -> compare x1p x2p)
;;

let add =
  fix (add : nat -> nat -> nat) =
    fun (n1 : nat) ->
      fun (n2 : nat) ->
        match n1 with
        | O -> n2
        | S n1p -> S (add n1p n2)
;;

let sub =
  fix (sub : nat -> nat -> nat) =
    fun (n1 : nat) ->
      fun (n2 : nat) ->
        match n1 with
        | O -> O
        | S n1p -> match n2 with
                    | O -> n1
                    | S n2p -> (sub n1p n2p)
;;

let mul =
  fix (mul : nat -> nat -> nat) =
    fun (n1 : nat) ->
      fun (n2 : nat) ->
        match n1 with
        | O -> O 
        | S n1p -> add n2 (mul n1p n2)
;;

let div =
  fix (div : nat -> nat -> nat) =
    fun (n1 : nat) ->
      fun (n2 : nat) ->
      match n2 with
      | O -> O
      | S n2p ->
        match n1 with
        | O -> O
        | S n1p ->
          match (compare n1 n2) with
            | LT -> O
            | EQ -> S(O)
            | GT -> S (div (sub n1 n2) n2)
;;

synth exp -> nat satisfying 

[INT(1)] -> 1, 
[ADD(INT(3), INT(4))] -> 7, 
[MUL(INT(3), INT(3))] -> 9, 
[MUL(INT(2), INT(3))] -> 6, 
[SUB(INT(4), INT(3))] -> 1,
[SUB(INT(5), INT(1))] -> 4,
[DIV(INT(4), INT(2))] -> 2,
[DIV(INT(5), INT(3))] -> 1
