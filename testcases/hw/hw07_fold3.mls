type nat =
  | O
  | S of nat

type list =
  | Nil
  | Cons of nat * list

type bool =
  | True
  | False

let sum =
  fix (sum : nat -> nat -> nat) =
    fun (n1 : nat) ->
      fun (n2 : nat) ->
        match n1 with
        | O -> n2
        | S n1p -> S (sum n1p n2)
;;

let sum2 =
  fix (sum2 : nat -> nat -> nat -> nat) =
    fun (n1 : nat) ->
      fun (n2 : nat) ->
        fun (n3 : nat) ->
            match n1 with
            | O -> sum n2 n3
            | S n1p -> S (sum2 n1p n2 n3)
;;

let sum3 =
  fix (sum3 : nat -> nat -> nat -> nat -> nat) =
    fun (n1 : nat) ->
      fun (n2 : nat) ->
        fun (n3 : nat) ->
          fun (n4 : nat) ->
            match n1 with
            | O -> sum2 n2 n3 n4
            | S n1p -> S (sum3 n1p n2 n3 n4)
;;

synth (nat -> nat -> nat -> nat -> nat) -> nat -> list -> list -> list -> nat satisfying

[sum3, 0, Cons(1,Nil), Cons(1,Nil), Cons(1,Nil)] -> 3,
[sum3, 1, Cons(1,Nil), Cons(1,Nil), Cons(1,Nil)] -> 4,
[sum3, 1, Nil, Nil, Nil] -> 1,
[sum3, 0, Cons(1,Nil), Cons(2,Nil), Cons(5,Nil)] -> 8,
[sum3, 2, Nil, Nil, Nil] -> 2,