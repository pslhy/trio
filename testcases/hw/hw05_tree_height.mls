type nat =
  | O
  | S of nat

type tree =
  | Leaf
  | Node of nat * tree * tree

type cmp =
  | LT
  | EQ
  | GT

let compare =
  fix (compare : nat -> nat -> cmp) =
    fun (x1 : nat) ->
      fun (x2 : nat) ->
        match x1 with
        | O -> (match x2 with
                | O -> EQ
                | S _ -> LT)
        | S x1 -> (match x2 with
                | O -> GT
                | S x2 -> compare x1 x2)
;;


synth tree -> nat satisfying

[Leaf] -> 0,
[Node (0, Leaf, Leaf)] -> 1,
[Node (0, Node (1, Leaf, Leaf), Leaf)] -> 2,
[Node (0, Leaf, Node (1, Leaf, Leaf))] -> 2,
[Node (0, Node (1, Leaf, Leaf), Node (2, Node(3, Leaf, Leaf), Leaf))] -> 3,
[Node (0, Node (1, Node(3, Leaf, Leaf), Leaf), Node (2, Leaf, Leaf))] -> 3,
[Node (0, Node (1, Node (2, Leaf, Leaf), Leaf), Leaf)] -> 3,
[Node (0, Leaf, Node (1, Node (2, Leaf, Node(3, Leaf, Leaf)), Leaf))] -> 4,
