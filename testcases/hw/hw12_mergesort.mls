type nat =
  | O
  | S of nat

type bool =
  | True
  | False

type list =
  | Nil
  | Cons of nat * list

type cmp =
  | LT
  | EQ
  | GT

let compare =
  fix (compare : nat -> nat -> cmp) =
    fun (x1 : nat) ->
      fun (x2 : nat) ->
        match x1 with
        | O -> (match x2 with
                | O -> EQ
                | S _ -> LT)
        | S x1 -> (match x2 with
                | O -> GT
                | S x2 -> compare x1 x2)
;;

synth list -> list -> list satisfying

[Nil, Nil] -> Nil,
[Nil, Cons(2,Cons(1,Nil))] -> Cons(2,Cons(1,Nil)),
[Cons(4,Cons(2,Nil)), Nil] -> Cons(4,Cons(2,Nil)),
[Cons(5,Cons(3,Nil)), Cons(5, Cons(2,Nil))] -> Cons(5,Cons(5, Cons(3, Cons(2, Nil)))),
[Cons(3,Cons(2,Cons(1,Nil))), Cons(5,Cons(4,Nil))] -> Cons(5,Cons(4,Cons(3,Cons(2,Cons(1,Nil))))),
