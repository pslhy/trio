type nat =
  | O
  | S of nat

type list =
  | Nil
  | Cons of nat * list

type llist =
  | LNil
  | LCons of list * llist

synth list -> list -> llist satisfying

[Nil, Nil] -> LNil,
[Cons(1,Cons(2,Cons(3,Nil))), Nil] -> LNil,
[Nil, Cons(4,Cons(5,Cons(6,Nil)))] -> LNil,
[Cons(1,Cons(2,Nil)), Cons(3,Cons(4,Nil))] -> LCons(Cons(1,Cons(3,Nil)), LCons(Cons(1,Cons(4,Nil)), LCons(Cons(2,Cons(3,Nil)), LCons(Cons(2,Cons(4,Nil)), LNil)))),
[Cons(1,Cons(2,Cons(3,Nil))), Cons(4,Cons(5,Cons(6,Nil)))] -> LCons(Cons(1,Cons(4,Nil)), LCons(Cons(1,Cons(5,Nil)), LCons(Cons(1,Cons(6,Nil)), LCons(Cons(2,Cons(4,Nil)), LCons(Cons(2,Cons(5,Nil)), LCons(Cons(2,Cons(6,Nil)), LCons(Cons(3,Cons(4,Nil)), LCons(Cons(3,Cons(5,Nil)), LCons(Cons(3,Cons(6,Nil)), LNil))))))))),
[Cons(4,Nil), Cons(3,Nil)] -> LCons(Cons(4,Cons(3,Nil)),LNil),
[Cons(1,Nil), Cons(1,Nil)] -> LCons(Cons(1,Cons(1,Nil)),LNil),