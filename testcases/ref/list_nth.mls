type nat =
  | O
  | S of nat

type list =
  | Nil
  | Cons of nat * list

synth list -> nat -> nat satisfying

equiv

fix (f : list -> nat -> nat) =
  fun (l:list) ->
    fun (n:nat) ->
      match l with
        | Nil -> O
        | Cons (h,t) -> (match n with
                       | O -> h
                       | S np -> f t np)