  type nat =
  | O
  | S of nat

type list =
  | Nil
  | Cons of nat * list

synth list -> nat -> list satisfying

equiv

fix (f : list -> nat -> list) =
  fun (l:list) ->
    fun (e:nat) ->
      match l with
        | Nil -> Cons (e, Nil)
        | Cons (h,t) -> Cons (h, f t e)
