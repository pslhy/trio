type nat =
  | O
  | S of nat

type list =
  | Nil
  | Cons of nat * list

type bool =
  | True
  | False

synth (nat -> nat -> nat) -> nat -> list -> nat satisfying

let sum =
  fix (sum : nat -> nat -> nat) =
    fun (n1 : nat) ->
      fun (n2 : nat) ->
        match n1 with
        | O -> n2
        | S n1p -> S (sum n1p n2)
;;

let is_odd =
  fix (is_odd : nat -> bool) =
    fun (x1 : nat) ->
      match x1 with
      | O -> False
      | S O -> True
      | S S x1p -> is_odd x1p
;;

let count_odd =
  fun (n1:nat) ->
    fun (n2:nat) ->
      match is_odd n2 with
      | True -> S n1
      | False -> n1
;;

equiv

fix (fold : (nat -> nat -> nat) -> nat -> list -> nat) =
  fun (f:(nat -> nat -> nat)) ->
    fun (init:nat) ->
      fun (l:list) ->
        match l with
          | Nil -> init
          | Cons (h,t) -> f (fold f init t) h