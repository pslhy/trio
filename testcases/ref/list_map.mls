type nat =
  | O
  | S of nat

type list =
  | Nil
  | Cons of nat * list

let zero =
  fun (n:nat) -> O
;;

let inc =
  fun (n:nat) -> S (n)
;;


synth (nat -> nat) -> list -> list satisfying

equiv

fix (map : (nat -> nat) -> list -> list) =
  fun (f:(nat -> nat)) ->
    fun (l:list) ->
      match l with
        | Nil -> Nil
        | Cons (h,t) -> Cons (f h, map f t)
